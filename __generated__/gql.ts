/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\nquery GetUserData {\n    getUserData {\n      details\n      statusCode\n      data {\n        id\n        clientId\n        firstName\n        lastName\n        patronymic\n        birthDate\n        gender\n        email\n        phoneNumber\n        additionalPhoneNumber\n        docType\n        docSeries\n        docNumber\n        docGivingDepName\n        docGivingDepCode\n        docDate\n        docRegAddress\n      }\n    }\n  }": types.GetUserDataDocument,
    "\nquery loginFlashCallCode($flashCallCode: FlashCallCode!){\n  loginFlashCallCode(flashCallCode: $flashCallCode){\n      data{\n          token\n      }\n      statusCode\n      details\n  }\n}\n  ": types.LoginFlashCallCodeDocument,
    "\n\nmutation changeLoginPhoneByPhone($oldPhoneNumber: String!, $newPhoneNumber: String!){\n  changeLoginPhoneByPhone(oldPhoneNumber: $oldPhoneNumber, newPhoneNumber: $newPhoneNumber){\n      data\n      statusCode\n      details\n  }\n}": types.ChangeLoginPhoneByPhoneDocument,
    "\nmutation PatientRegistration ($patient: PatientRegistration!){\n    patientRegistration(\n      patient: $patient\n    ) {\n      statusCode\n    details\n    data\n    }\n  }": types.PatientRegistrationDocument,
    "\nmutation RegistrationFlashCallCode ($flashCallCode:FlashCallCode!)  {\n    registrationFlashCallCode(flashCallCode: $flashCallCode) {\n      data {\n        token\n      }\n    details\n    statusCode\n    }\n  }": types.RegistrationFlashCallCodeDocument,
    "\nquery patienLoginByPassword($loginPhoneNumber: String!, $password: String!){\n  patienLoginByPassword(loginPhoneNumber: $loginPhoneNumber, password: $password){\n      data{\n          token\n      }\n      statusCode\n      details\n  }\n}\n  ": types.PatienLoginByPasswordDocument,
    "\nquery patientLoginByPhone($loginPhoneNumber: String!){\n  patientLoginByPhone(loginPhoneNumber: $loginPhoneNumber){\n      data{\n          token\n      }\n      statusCode\n      details\n  }\n}\n  ": types.PatientLoginByPhoneDocument,
    "\nquery getCities($filteringAttrs: CityInput, $orderingAttrs: CityInput, $skip: Int, $limit: Int, $descSorting: Boolean){\n  getCities(filteringAttrs: $filteringAttrs, orderingAttrs: $orderingAttrs, skip: $skip, limit: $limit, descSorting: $descSorting){\n      data{\n          id\n          clientId\n          name\n          isActive\n      }\n      statusCode\n      details\n  }\n}\n": types.GetCitiesDocument,
    "\nquery getDoctors($filteringAttrs: DoctorInput, $orderingAttrs: DoctorInput, $skip: Int, $limit: Int, $descSorting: Boolean){\n    getDoctors(filteringAttrs: $filteringAttrs, orderingAttrs: $orderingAttrs, skip: $skip, limit: $limit, descSorting: $descSorting){\n        data{\n            id\n            clientId\n            firstName\n            lastName\n            patronymic\n            birthDate\n            photo\n            doctorCategoryId\n            privatePhone\n            workPhone\n            email\n            commonExperience\n            isActive\n            doctorCategory{\n                id\n                clientId\n                name\n                description\n                isActive\n            }\n        }\n        statusCode\n        details\n    }\n}\n": types.GetDoctorsDocument,
    "\nquery getDoctorsMspecialities($filteringAttrs: DoctorMspecialityInput, $orderingAttrs: DoctorMspecialityInput, $skip: Int, $limit: Int, $descSorting: Boolean){\n    getDoctorsMspecialities(filteringAttrs: $filteringAttrs, orderingAttrs: $orderingAttrs, skip: $skip, limit: $limit, descSorting: $descSorting){\n        data{\n            id\n            doctorId\n            mspecialityId\n            isActive\n            doctor{\n                id\n                clientId\n                firstName\n                lastName\n                patronymic\n                birthDate\n                photo\n                doctorCategoryId\n                privatePhone\n                workPhone\n                email\n                commonExperience\n                isActive\n                doctorCategory{\n                    id\n                    clientId\n                    name\n                    description\n                    isActive\n                }\n            }\n            mspeciality{\n                id\n                clientId\n                viewName\n                searchName\n                viewDescription\n                searchDescription\n                isActive\n            }\n        }\n        statusCode\n        details\n    }\n}\n": types.GetDoctorsMspecialitiesDocument,
    "\nquery getMedicalCenters($filteringAttrs: MedicalCenterInput, $orderingAttrs: MedicalCenterInput, $skip: Int, $limit: Int, $descSorting: Boolean){\n  getMedicalCenters(filteringAttrs: $filteringAttrs, orderingAttrs: $orderingAttrs, skip: $skip, limit: $limit, descSorting: $descSorting){\n      data{\n          id\n          clientId\n          cityId\n          name\n          address\n          longitude\n          latitude\n          description\n          inn\n          bankBic\n          settlementAccount\n          correspondentAccount\n          kpp\n          isActive\n          logo\n          websiteUrl\n          phoneFax\n          dmsPhone\n          workTime\n          collectionTestsTime\n          vaccinationTime\n          city{\n              id\n              clientId\n              name\n              isActive\n          }\n      }\n      statusCode\n      details\n  }\n}\n  ": types.GetMedicalCentersDocument,
    "\nquery getServices($filteringAttrs: ServiceInput, $orderingAttrs: ServiceInput, $skip: Int, $limit: Int, $descSorting: Boolean){\n    getServices(filteringAttrs: $filteringAttrs, orderingAttrs: $orderingAttrs, skip: $skip, limit: $limit, descSorting: $descSorting){\n        data{\n            id\n            clientId\n            serviceTypeId\n            serviceGroupId\n            nameForStaff\n            nameForMz\n            nameForLk\n            fullDescription\n            appliedMethod\n            preparationRules\n            shortDescription\n            comment\n            mzCode\n            executionTime\n            nursesExecutionTime\n            minimalAge\n            maximalAge\n            gender\n            isUrgent\n            isForHomeOnly\n            selectedServiceNotification\n            isComplexService\n            clientServiceCode\n            isActive\n            serviceType{\n                id\n                clientId\n                name\n                description\n                isActive\n            }\n            serviceGroup{\n                id\n                clientId\n                name\n                viewName\n                description\n                clientServiceGroupCode\n                levelSortingCode\n                isActive\n                xmembers{\n                    id\n                    clientId\n                    name\n                    viewName\n                    description\n                    clientServiceGroupCode\n                    levelSortingCode\n                    isActive\n                    xmembers{\n                        id\n                        clientId\n                        name\n                        viewName\n                        description\n                        clientServiceGroupCode\n                        levelSortingCode\n                        isActive\n                        path\n                    }\n                    path\n                }\n                path\n            }\n        }\n        statusCode\n        details\n    }\n}\n": types.GetServicesDocument,
    "\nquery getServiceGroup($name: String){\n    getServiceGroup(name: $name){\n        data{\n            id\n            clientId\n            name\n            viewName\n            description\n            clientServiceGroupCode\n            levelSortingCode\n            isActive\n            xmembers{\n                id\n                clientId\n                name\n                viewName\n                description\n                clientServiceGroupCode\n                levelSortingCode\n                isActive\n                xmembers{\n                    id\n                    clientId\n                    name\n                    viewName\n                    description\n                    clientServiceGroupCode\n                    levelSortingCode\n                    isActive\n                    xmembers{\n                        id\n                        clientId\n                        name\n                        viewName\n                        description\n                        clientServiceGroupCode\n                        levelSortingCode\n                        isActive\n                        xmembers{\n                            id\n                            clientId\n                            name\n                            viewName\n                            description\n                            clientServiceGroupCode\n                            levelSortingCode\n                            isActive\n                            xmembers{\n                                id\n                                clientId\n                                name\n                                viewName\n                                description\n                                clientServiceGroupCode\n                                levelSortingCode\n                                isActive\n                                xmembers{\n                                    id\n                                    clientId\n                                    name\n                                    viewName\n                                    description\n                                    clientServiceGroupCode\n                                    levelSortingCode\n                                    isActive\n                                    xmembers{\n                                        id\n                                        clientId\n                                        name\n                                        viewName\n                                        description\n                                        clientServiceGroupCode\n                                        levelSortingCode\n                                        isActive\n                                        \n                                        path\n                                    }\n                                    path\n                                }\n                                path\n                            }\n                            path\n                        }\n                        path\n                    }\n                    path\n                }\n                path\n            }\n            path\n        }\n        statusCode\n        details\n    }\n}\n": types.GetServiceGroupDocument,
    "\nquery getServicesTypes($filteringAttrs: ServiceTypeInput, $orderingAttrs: ServiceTypeInput, $skip: Int, $limit: Int, $descSorting: Boolean){\n  getServicesTypes(filteringAttrs: $filteringAttrs, orderingAttrs: $orderingAttrs, skip: $skip, limit: $limit, descSorting: $descSorting){\n      data{\n          id\n          name\n          description\n          isActive\n      }\n      statusCode\n      details\n  }\n}\n": types.GetServicesTypesDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery GetUserData {\n    getUserData {\n      details\n      statusCode\n      data {\n        id\n        clientId\n        firstName\n        lastName\n        patronymic\n        birthDate\n        gender\n        email\n        phoneNumber\n        additionalPhoneNumber\n        docType\n        docSeries\n        docNumber\n        docGivingDepName\n        docGivingDepCode\n        docDate\n        docRegAddress\n      }\n    }\n  }"): (typeof documents)["\nquery GetUserData {\n    getUserData {\n      details\n      statusCode\n      data {\n        id\n        clientId\n        firstName\n        lastName\n        patronymic\n        birthDate\n        gender\n        email\n        phoneNumber\n        additionalPhoneNumber\n        docType\n        docSeries\n        docNumber\n        docGivingDepName\n        docGivingDepCode\n        docDate\n        docRegAddress\n      }\n    }\n  }"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery loginFlashCallCode($flashCallCode: FlashCallCode!){\n  loginFlashCallCode(flashCallCode: $flashCallCode){\n      data{\n          token\n      }\n      statusCode\n      details\n  }\n}\n  "): (typeof documents)["\nquery loginFlashCallCode($flashCallCode: FlashCallCode!){\n  loginFlashCallCode(flashCallCode: $flashCallCode){\n      data{\n          token\n      }\n      statusCode\n      details\n  }\n}\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n\nmutation changeLoginPhoneByPhone($oldPhoneNumber: String!, $newPhoneNumber: String!){\n  changeLoginPhoneByPhone(oldPhoneNumber: $oldPhoneNumber, newPhoneNumber: $newPhoneNumber){\n      data\n      statusCode\n      details\n  }\n}"): (typeof documents)["\n\nmutation changeLoginPhoneByPhone($oldPhoneNumber: String!, $newPhoneNumber: String!){\n  changeLoginPhoneByPhone(oldPhoneNumber: $oldPhoneNumber, newPhoneNumber: $newPhoneNumber){\n      data\n      statusCode\n      details\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nmutation PatientRegistration ($patient: PatientRegistration!){\n    patientRegistration(\n      patient: $patient\n    ) {\n      statusCode\n    details\n    data\n    }\n  }"): (typeof documents)["\nmutation PatientRegistration ($patient: PatientRegistration!){\n    patientRegistration(\n      patient: $patient\n    ) {\n      statusCode\n    details\n    data\n    }\n  }"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nmutation RegistrationFlashCallCode ($flashCallCode:FlashCallCode!)  {\n    registrationFlashCallCode(flashCallCode: $flashCallCode) {\n      data {\n        token\n      }\n    details\n    statusCode\n    }\n  }"): (typeof documents)["\nmutation RegistrationFlashCallCode ($flashCallCode:FlashCallCode!)  {\n    registrationFlashCallCode(flashCallCode: $flashCallCode) {\n      data {\n        token\n      }\n    details\n    statusCode\n    }\n  }"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery patienLoginByPassword($loginPhoneNumber: String!, $password: String!){\n  patienLoginByPassword(loginPhoneNumber: $loginPhoneNumber, password: $password){\n      data{\n          token\n      }\n      statusCode\n      details\n  }\n}\n  "): (typeof documents)["\nquery patienLoginByPassword($loginPhoneNumber: String!, $password: String!){\n  patienLoginByPassword(loginPhoneNumber: $loginPhoneNumber, password: $password){\n      data{\n          token\n      }\n      statusCode\n      details\n  }\n}\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery patientLoginByPhone($loginPhoneNumber: String!){\n  patientLoginByPhone(loginPhoneNumber: $loginPhoneNumber){\n      data{\n          token\n      }\n      statusCode\n      details\n  }\n}\n  "): (typeof documents)["\nquery patientLoginByPhone($loginPhoneNumber: String!){\n  patientLoginByPhone(loginPhoneNumber: $loginPhoneNumber){\n      data{\n          token\n      }\n      statusCode\n      details\n  }\n}\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery getCities($filteringAttrs: CityInput, $orderingAttrs: CityInput, $skip: Int, $limit: Int, $descSorting: Boolean){\n  getCities(filteringAttrs: $filteringAttrs, orderingAttrs: $orderingAttrs, skip: $skip, limit: $limit, descSorting: $descSorting){\n      data{\n          id\n          clientId\n          name\n          isActive\n      }\n      statusCode\n      details\n  }\n}\n"): (typeof documents)["\nquery getCities($filteringAttrs: CityInput, $orderingAttrs: CityInput, $skip: Int, $limit: Int, $descSorting: Boolean){\n  getCities(filteringAttrs: $filteringAttrs, orderingAttrs: $orderingAttrs, skip: $skip, limit: $limit, descSorting: $descSorting){\n      data{\n          id\n          clientId\n          name\n          isActive\n      }\n      statusCode\n      details\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery getDoctors($filteringAttrs: DoctorInput, $orderingAttrs: DoctorInput, $skip: Int, $limit: Int, $descSorting: Boolean){\n    getDoctors(filteringAttrs: $filteringAttrs, orderingAttrs: $orderingAttrs, skip: $skip, limit: $limit, descSorting: $descSorting){\n        data{\n            id\n            clientId\n            firstName\n            lastName\n            patronymic\n            birthDate\n            photo\n            doctorCategoryId\n            privatePhone\n            workPhone\n            email\n            commonExperience\n            isActive\n            doctorCategory{\n                id\n                clientId\n                name\n                description\n                isActive\n            }\n        }\n        statusCode\n        details\n    }\n}\n"): (typeof documents)["\nquery getDoctors($filteringAttrs: DoctorInput, $orderingAttrs: DoctorInput, $skip: Int, $limit: Int, $descSorting: Boolean){\n    getDoctors(filteringAttrs: $filteringAttrs, orderingAttrs: $orderingAttrs, skip: $skip, limit: $limit, descSorting: $descSorting){\n        data{\n            id\n            clientId\n            firstName\n            lastName\n            patronymic\n            birthDate\n            photo\n            doctorCategoryId\n            privatePhone\n            workPhone\n            email\n            commonExperience\n            isActive\n            doctorCategory{\n                id\n                clientId\n                name\n                description\n                isActive\n            }\n        }\n        statusCode\n        details\n    }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery getDoctorsMspecialities($filteringAttrs: DoctorMspecialityInput, $orderingAttrs: DoctorMspecialityInput, $skip: Int, $limit: Int, $descSorting: Boolean){\n    getDoctorsMspecialities(filteringAttrs: $filteringAttrs, orderingAttrs: $orderingAttrs, skip: $skip, limit: $limit, descSorting: $descSorting){\n        data{\n            id\n            doctorId\n            mspecialityId\n            isActive\n            doctor{\n                id\n                clientId\n                firstName\n                lastName\n                patronymic\n                birthDate\n                photo\n                doctorCategoryId\n                privatePhone\n                workPhone\n                email\n                commonExperience\n                isActive\n                doctorCategory{\n                    id\n                    clientId\n                    name\n                    description\n                    isActive\n                }\n            }\n            mspeciality{\n                id\n                clientId\n                viewName\n                searchName\n                viewDescription\n                searchDescription\n                isActive\n            }\n        }\n        statusCode\n        details\n    }\n}\n"): (typeof documents)["\nquery getDoctorsMspecialities($filteringAttrs: DoctorMspecialityInput, $orderingAttrs: DoctorMspecialityInput, $skip: Int, $limit: Int, $descSorting: Boolean){\n    getDoctorsMspecialities(filteringAttrs: $filteringAttrs, orderingAttrs: $orderingAttrs, skip: $skip, limit: $limit, descSorting: $descSorting){\n        data{\n            id\n            doctorId\n            mspecialityId\n            isActive\n            doctor{\n                id\n                clientId\n                firstName\n                lastName\n                patronymic\n                birthDate\n                photo\n                doctorCategoryId\n                privatePhone\n                workPhone\n                email\n                commonExperience\n                isActive\n                doctorCategory{\n                    id\n                    clientId\n                    name\n                    description\n                    isActive\n                }\n            }\n            mspeciality{\n                id\n                clientId\n                viewName\n                searchName\n                viewDescription\n                searchDescription\n                isActive\n            }\n        }\n        statusCode\n        details\n    }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery getMedicalCenters($filteringAttrs: MedicalCenterInput, $orderingAttrs: MedicalCenterInput, $skip: Int, $limit: Int, $descSorting: Boolean){\n  getMedicalCenters(filteringAttrs: $filteringAttrs, orderingAttrs: $orderingAttrs, skip: $skip, limit: $limit, descSorting: $descSorting){\n      data{\n          id\n          clientId\n          cityId\n          name\n          address\n          longitude\n          latitude\n          description\n          inn\n          bankBic\n          settlementAccount\n          correspondentAccount\n          kpp\n          isActive\n          logo\n          websiteUrl\n          phoneFax\n          dmsPhone\n          workTime\n          collectionTestsTime\n          vaccinationTime\n          city{\n              id\n              clientId\n              name\n              isActive\n          }\n      }\n      statusCode\n      details\n  }\n}\n  "): (typeof documents)["\nquery getMedicalCenters($filteringAttrs: MedicalCenterInput, $orderingAttrs: MedicalCenterInput, $skip: Int, $limit: Int, $descSorting: Boolean){\n  getMedicalCenters(filteringAttrs: $filteringAttrs, orderingAttrs: $orderingAttrs, skip: $skip, limit: $limit, descSorting: $descSorting){\n      data{\n          id\n          clientId\n          cityId\n          name\n          address\n          longitude\n          latitude\n          description\n          inn\n          bankBic\n          settlementAccount\n          correspondentAccount\n          kpp\n          isActive\n          logo\n          websiteUrl\n          phoneFax\n          dmsPhone\n          workTime\n          collectionTestsTime\n          vaccinationTime\n          city{\n              id\n              clientId\n              name\n              isActive\n          }\n      }\n      statusCode\n      details\n  }\n}\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery getServices($filteringAttrs: ServiceInput, $orderingAttrs: ServiceInput, $skip: Int, $limit: Int, $descSorting: Boolean){\n    getServices(filteringAttrs: $filteringAttrs, orderingAttrs: $orderingAttrs, skip: $skip, limit: $limit, descSorting: $descSorting){\n        data{\n            id\n            clientId\n            serviceTypeId\n            serviceGroupId\n            nameForStaff\n            nameForMz\n            nameForLk\n            fullDescription\n            appliedMethod\n            preparationRules\n            shortDescription\n            comment\n            mzCode\n            executionTime\n            nursesExecutionTime\n            minimalAge\n            maximalAge\n            gender\n            isUrgent\n            isForHomeOnly\n            selectedServiceNotification\n            isComplexService\n            clientServiceCode\n            isActive\n            serviceType{\n                id\n                clientId\n                name\n                description\n                isActive\n            }\n            serviceGroup{\n                id\n                clientId\n                name\n                viewName\n                description\n                clientServiceGroupCode\n                levelSortingCode\n                isActive\n                xmembers{\n                    id\n                    clientId\n                    name\n                    viewName\n                    description\n                    clientServiceGroupCode\n                    levelSortingCode\n                    isActive\n                    xmembers{\n                        id\n                        clientId\n                        name\n                        viewName\n                        description\n                        clientServiceGroupCode\n                        levelSortingCode\n                        isActive\n                        path\n                    }\n                    path\n                }\n                path\n            }\n        }\n        statusCode\n        details\n    }\n}\n"): (typeof documents)["\nquery getServices($filteringAttrs: ServiceInput, $orderingAttrs: ServiceInput, $skip: Int, $limit: Int, $descSorting: Boolean){\n    getServices(filteringAttrs: $filteringAttrs, orderingAttrs: $orderingAttrs, skip: $skip, limit: $limit, descSorting: $descSorting){\n        data{\n            id\n            clientId\n            serviceTypeId\n            serviceGroupId\n            nameForStaff\n            nameForMz\n            nameForLk\n            fullDescription\n            appliedMethod\n            preparationRules\n            shortDescription\n            comment\n            mzCode\n            executionTime\n            nursesExecutionTime\n            minimalAge\n            maximalAge\n            gender\n            isUrgent\n            isForHomeOnly\n            selectedServiceNotification\n            isComplexService\n            clientServiceCode\n            isActive\n            serviceType{\n                id\n                clientId\n                name\n                description\n                isActive\n            }\n            serviceGroup{\n                id\n                clientId\n                name\n                viewName\n                description\n                clientServiceGroupCode\n                levelSortingCode\n                isActive\n                xmembers{\n                    id\n                    clientId\n                    name\n                    viewName\n                    description\n                    clientServiceGroupCode\n                    levelSortingCode\n                    isActive\n                    xmembers{\n                        id\n                        clientId\n                        name\n                        viewName\n                        description\n                        clientServiceGroupCode\n                        levelSortingCode\n                        isActive\n                        path\n                    }\n                    path\n                }\n                path\n            }\n        }\n        statusCode\n        details\n    }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery getServiceGroup($name: String){\n    getServiceGroup(name: $name){\n        data{\n            id\n            clientId\n            name\n            viewName\n            description\n            clientServiceGroupCode\n            levelSortingCode\n            isActive\n            xmembers{\n                id\n                clientId\n                name\n                viewName\n                description\n                clientServiceGroupCode\n                levelSortingCode\n                isActive\n                xmembers{\n                    id\n                    clientId\n                    name\n                    viewName\n                    description\n                    clientServiceGroupCode\n                    levelSortingCode\n                    isActive\n                    xmembers{\n                        id\n                        clientId\n                        name\n                        viewName\n                        description\n                        clientServiceGroupCode\n                        levelSortingCode\n                        isActive\n                        xmembers{\n                            id\n                            clientId\n                            name\n                            viewName\n                            description\n                            clientServiceGroupCode\n                            levelSortingCode\n                            isActive\n                            xmembers{\n                                id\n                                clientId\n                                name\n                                viewName\n                                description\n                                clientServiceGroupCode\n                                levelSortingCode\n                                isActive\n                                xmembers{\n                                    id\n                                    clientId\n                                    name\n                                    viewName\n                                    description\n                                    clientServiceGroupCode\n                                    levelSortingCode\n                                    isActive\n                                    xmembers{\n                                        id\n                                        clientId\n                                        name\n                                        viewName\n                                        description\n                                        clientServiceGroupCode\n                                        levelSortingCode\n                                        isActive\n                                        \n                                        path\n                                    }\n                                    path\n                                }\n                                path\n                            }\n                            path\n                        }\n                        path\n                    }\n                    path\n                }\n                path\n            }\n            path\n        }\n        statusCode\n        details\n    }\n}\n"): (typeof documents)["\nquery getServiceGroup($name: String){\n    getServiceGroup(name: $name){\n        data{\n            id\n            clientId\n            name\n            viewName\n            description\n            clientServiceGroupCode\n            levelSortingCode\n            isActive\n            xmembers{\n                id\n                clientId\n                name\n                viewName\n                description\n                clientServiceGroupCode\n                levelSortingCode\n                isActive\n                xmembers{\n                    id\n                    clientId\n                    name\n                    viewName\n                    description\n                    clientServiceGroupCode\n                    levelSortingCode\n                    isActive\n                    xmembers{\n                        id\n                        clientId\n                        name\n                        viewName\n                        description\n                        clientServiceGroupCode\n                        levelSortingCode\n                        isActive\n                        xmembers{\n                            id\n                            clientId\n                            name\n                            viewName\n                            description\n                            clientServiceGroupCode\n                            levelSortingCode\n                            isActive\n                            xmembers{\n                                id\n                                clientId\n                                name\n                                viewName\n                                description\n                                clientServiceGroupCode\n                                levelSortingCode\n                                isActive\n                                xmembers{\n                                    id\n                                    clientId\n                                    name\n                                    viewName\n                                    description\n                                    clientServiceGroupCode\n                                    levelSortingCode\n                                    isActive\n                                    xmembers{\n                                        id\n                                        clientId\n                                        name\n                                        viewName\n                                        description\n                                        clientServiceGroupCode\n                                        levelSortingCode\n                                        isActive\n                                        \n                                        path\n                                    }\n                                    path\n                                }\n                                path\n                            }\n                            path\n                        }\n                        path\n                    }\n                    path\n                }\n                path\n            }\n            path\n        }\n        statusCode\n        details\n    }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery getServicesTypes($filteringAttrs: ServiceTypeInput, $orderingAttrs: ServiceTypeInput, $skip: Int, $limit: Int, $descSorting: Boolean){\n  getServicesTypes(filteringAttrs: $filteringAttrs, orderingAttrs: $orderingAttrs, skip: $skip, limit: $limit, descSorting: $descSorting){\n      data{\n          id\n          name\n          description\n          isActive\n      }\n      statusCode\n      details\n  }\n}\n"): (typeof documents)["\nquery getServicesTypes($filteringAttrs: ServiceTypeInput, $orderingAttrs: ServiceTypeInput, $skip: Int, $limit: Int, $descSorting: Boolean){\n  getServicesTypes(filteringAttrs: $filteringAttrs, orderingAttrs: $orderingAttrs, skip: $skip, limit: $limit, descSorting: $descSorting){\n      data{\n          id\n          name\n          description\n          isActive\n      }\n      statusCode\n      details\n  }\n}\n"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;